// Code generated by mockery v2.35.3. DO NOT EDIT.

package pod

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"
)

// MockLogsReader is an autogenerated mock type for the LogsReader type
type MockLogsReader struct {
	mock.Mock
}

type MockLogsReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogsReader) EXPECT() *MockLogsReader_Expecter {
	return &MockLogsReader_Expecter{mock: &_m.Mock}
}

// GetLogs provides a mock function with given fields: ctx, pod, container
func (_m *MockLogsReader) GetLogs(ctx context.Context, pod types.NamespacedName, container string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, pod, container)

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName, string) (io.ReadCloser, error)); ok {
		return rf(ctx, pod, container)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName, string) io.ReadCloser); ok {
		r0 = rf(ctx, pod, container)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.NamespacedName, string) error); ok {
		r1 = rf(ctx, pod, container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLogsReader_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type MockLogsReader_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - pod types.NamespacedName
//   - container string
func (_e *MockLogsReader_Expecter) GetLogs(ctx interface{}, pod interface{}, container interface{}) *MockLogsReader_GetLogs_Call {
	return &MockLogsReader_GetLogs_Call{Call: _e.mock.On("GetLogs", ctx, pod, container)}
}

func (_c *MockLogsReader_GetLogs_Call) Run(run func(ctx context.Context, pod types.NamespacedName, container string)) *MockLogsReader_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NamespacedName), args[2].(string))
	})
	return _c
}

func (_c *MockLogsReader_GetLogs_Call) Return(_a0 io.ReadCloser, _a1 error) *MockLogsReader_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLogsReader_GetLogs_Call) RunAndReturn(run func(context.Context, types.NamespacedName, string) (io.ReadCloser, error)) *MockLogsReader_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogsReader creates a new instance of MockLogsReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogsReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogsReader {
	mock := &MockLogsReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
