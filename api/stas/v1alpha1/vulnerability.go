package v1alpha1

import (
	"cmp"
	"encoding/json"
)

// Vulnerability contains details for a detected vulnerability.
type Vulnerability struct {
	VulnerabilityID  string   `json:"vulnerabilityID"`
	PkgName          string   `json:"pkgName"`
	InstalledVersion string   `json:"installedVersion"`
	Severity         Severity `json:"severity"`

	PkgPath      string `json:"pkgPath,omitempty"`
	FixedVersion string `json:"fixedVersion,omitempty"`
	Title        string `json:"title,omitempty"`
	PrimaryURL   string `json:"primaryURL,omitempty"`
}

// BySeverity implements SortFunc based on the Severity++ fields.
func BySeverity(v1, v2 Vulnerability) int {
	if c := cmp.Compare(v1.Severity, v2.Severity); c != 0 {
		return c
	}

	if c := cmp.Compare(v1.PkgName, v2.PkgName); c != 0 {
		return c
	}

	if c := cmp.Compare(v1.InstalledVersion, v2.InstalledVersion); c != 0 {
		return c
	}

	return cmp.Compare(v1.VulnerabilityID, v2.VulnerabilityID)
}

//goland:noinspection GoUnusedConst
const (
	SeverityUnknown Severity = iota
	SeverityLow
	SeverityMedium
	SeverityHigh
	SeverityCritical
)

const (
	MinSeverity = SeverityUnknown
	MaxSeverity = SeverityCritical
)

var severityToString = map[Severity]string{
	SeverityUnknown:  "UNKNOWN",
	SeverityLow:      "LOW",
	SeverityMedium:   "MEDIUM",
	SeverityHigh:     "HIGH",
	SeverityCritical: "CRITICAL",
}

var severityToID = map[string]Severity{
	"UNKNOWN":  SeverityUnknown,
	"LOW":      SeverityLow,
	"MEDIUM":   SeverityMedium,
	"HIGH":     SeverityHigh,
	"CRITICAL": SeverityCritical,
}

// +kubebuilder:validation:Type=string
// +kubebuilder:validation:Enum={UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL}
type Severity int

func (s Severity) MarshalJSON() ([]byte, error) {
	return json.Marshal(severityToString[s])
}

func (s *Severity) UnmarshalJSON(b []byte) error {
	var j string

	err := json.Unmarshal(b, &j)
	if err != nil {
		return err
	}

	// Note that if the string cannot be found then it will be set to the zero value, 'UNKNOWN' in this case.
	*s = severityToID[j]

	return nil
}

func (s Severity) String() string {
	return severityToString[s]
}
