package v1alpha1

import "fmt"

// Vulnerability contains details for a detected vulnerability.
type Vulnerability struct {
	VulnerabilityID  string `json:"vulnerabilityID"`
	PkgName          string `json:"pkgName"`
	InstalledVersion string `json:"installedVersion"`
	Severity         string `json:"severity"`

	PkgPath      string `json:"pkgPath,omitempty"`
	FixedVersion string `json:"fixedVersion,omitempty"`
	Title        string `json:"title,omitempty"`
	PrimaryURL   string `json:"primaryURL,omitempty"`
}

// BySeverity implements sort.Interface based on the Severity field.
type BySeverity []Vulnerability

// Len returns the length of DetectedVulnerabilities
func (v BySeverity) Len() int { return len(v) }

// Less compares 2 DetectedVulnerabilities based on severity, package name, installed version and vulnerabilityID
func (v BySeverity) Less(i, j int) bool {
	ret := CompareSeverityString(
		v[j].Severity, v[i].Severity,
	)
	if ret != 0 {
		return ret > 0
	}
	if v[i].PkgName != v[j].PkgName {
		return v[i].PkgName < v[j].PkgName
	} else if v[i].InstalledVersion != v[j].InstalledVersion {
		return v[i].InstalledVersion < v[j].InstalledVersion
	}
	return v[i].VulnerabilityID < v[j].VulnerabilityID
}

// Swap swaps 2 vulnerability
func (v BySeverity) Swap(i, j int) { v[i], v[j] = v[j], v[i] }

type Severity int

//goland:noinspection GoUnusedConst
const (
	SeverityUnknown Severity = iota
	SeverityLow
	SeverityMedium
	SeverityHigh
	SeverityCritical
)

const (
	MinSeverity = SeverityUnknown
	MaxSeverity = SeverityCritical
)

var (
	SeverityNames = []string{
		"UNKNOWN",
		"LOW",
		"MEDIUM",
		"HIGH",
		"CRITICAL",
	}
)

func NewSeverity(severity string) (Severity, error) {
	for i, name := range SeverityNames {
		if severity == name {
			return Severity(i), nil
		}
	}
	return SeverityUnknown, fmt.Errorf("unknown severity: %s", severity)
}

func CompareSeverityString(sev1, sev2 string) int {
	s1, _ := NewSeverity(sev1)
	s2, _ := NewSeverity(sev2)
	return int(s2) - int(s1)
}

func (s Severity) String() string {
	return SeverityNames[s]
}
